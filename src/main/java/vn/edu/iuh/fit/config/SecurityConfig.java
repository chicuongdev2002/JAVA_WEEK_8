package vn.edu.iuh.fit.config;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.context.annotation.Bean;import org.springframework.context.annotation.Configuration;import org.springframework.security.config.Customizer;import org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder;import org.springframework.security.config.annotation.web.builders.HttpSecurity;import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;import org.springframework.security.core.userdetails.User;import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;import org.springframework.security.crypto.password.PasswordEncoder;import org.springframework.security.web.SecurityFilterChain;@Configuration@EnableWebSecuritypublic class SecurityConfig {    @Autowired    public void globalConfig(AuthenticationManagerBuilder auth,                             PasswordEncoder encoder)throws  Exception{         auth.inMemoryAuthentication()                 .withUser(User.withUsername("admin")                         .password(encoder.encode("admin"))                         .roles("ADMIN")                         .build())         .withUser(User.withUsername("teo")                .password(encoder.encode("teo"))                .roles("TEO")                .build())         .withUser(User.withUsername("user")                .password(encoder.encode("user"))                .roles("USER")                .build());    }    @Bean    public SecurityFilterChain filterChain(HttpSecurity http) throws Exception{        http.authorizeHttpRequests(auth->                auth.requestMatchers("/","home","index").permitAll()//Không cần đăng nhập                        .requestMatchers(("/h2-console/**")).permitAll()//Database H2 không cần đăng nhập                        .requestMatchers("/api/**").hasAnyRole("ADMIN","USER","TEO")//api thì cần đăng nhập với quyền ADMIN,USER,TEO                        .requestMatchers("/admin/**").hasRole("ADMIN")//admin thì cần đăng nhập với quyền ADMIN                        .anyRequest().authenticated());//Các request còn lại thì có thể đăng nhập bằng bất kỳ hình thức nào        http.httpBasic(Customizer.withDefaults());                   return http.build();    }    @Bean    public PasswordEncoder encoder(){        return new BCryptPasswordEncoder();    }}